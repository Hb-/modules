<xar:comment> License: GPL http://www.gnu.org/copyleft/gpl.html </xar:comment>
<xar:set name="xarigamiprojectlink">'<a href="http://xarigami.com/project/xartinymce" title="'.xarML('xarTinyMCE Project page at xarigami.com').'">'.xarML('xarTinyMCE news and resources').'</a>'</xar:set>
<div class="xar-mod-head">
   <span class="xar-mod-title"><xar:mlstring>XarTinyMCE Administration</xar:mlstring></span>
</div>
<div class="xar-mod-body">
    <xar:template type="module" module="tinymce" file="admin-menu" />
    <img src="#xarTplGetImage('admin_generic.gif','base')#" class="xar-module-icon" alt="official icon" width="96" height="96" />
    <h2><xar:mlstring>Overview</xar:mlstring></h2>
    <h3><xar:mlstring>What is it?</xar:mlstring></h3>
        <p><em><xar:mlstring>
            XarTinyMCE is a Xaraya Module based on TinyMCE, a platform independent web based Javascript
            HTML WYSIWYG editor released as Open Source under LGPL by Moxiecode Systems AB</xar:mlstring></em>
        </p>
        <p> 
            <xar:set name="moxielink">'<a href="http://tinymce.moxiecode.com/" title="Moxiecode">http://tinymce.moxiecode.com</a>'</xar:set>
            <xar:ml>
                <xar:mlstring>xarTinyMCE module integrates the TinyMCE application by #(1)</xar:mlstring>
                <xar:mlvar>#$moxielink#</xar:mlvar>
            </xar:ml>
            <xar:mlstring> for use within your Xaraya web site. It has a number of nice features with
                multiple browser support for all modern browsers 
                (currently Mozilla, MSIE, FireFox, Opera and Safari) and support for XHTML 1.0 strict 
                markup. There are powerful features for not only allowing or disallowing 
                xhtml tags (like the Xaraya HTML module), but also what attributes, 
                and attribute values to allow. You can enhance
            xarTinyMCE further with some of the bundled plugins and configuration settings.</xar:mlstring>
        </p>

        <h3>
            <xar:mlstring>How to use it?</xar:mlstring>
        </h3>
            <ol>
                <li style="margin-top:20px;"><xar:mlstring>Install this module like you would any other Xaraya module. That is:</xar:mlstring>
                    <ul>
                      <li><xar:mlstring>put the tinymce folder in your Xaraya modules directory</xar:mlstring>
                       </li>
                       <li><xar:mlstring> go to the Administration menu -&gt; Modules -&gt; View All</xar:mlstring>
                       </li>
                       <li><xar:mlstring> Click on the &quot;install&quot; link of the tinymce module</xar:mlstring></li>
                    </ul>
                </li>
                <li style="margin-top:20px;"><xar:mlstring>The XarTinyMCE editor is not turned on by default even after installation.
                      You can now do this in the XarTinyMCE Module Configuration area:</xar:mlstring>
                     <ul>
                         <li><xar:mlstring>go to the xarTinyMCE Administration menu -&gt; Base -&gt; Modify Config </xar:mlstring></li>
                         <li><xar:mlstring>choose the tab &quot;Install Options&quot;</xar:mlstring></li>
                         <li><xar:mlstring>Check the Active xarTinyMCE checkbox.</xar:mlstring></li>
                    </ul>
                </li>
                <li style="margin-top:20px;">
                    <xar:mlstring>Once installed you have two basic ways (with variations on these) to customize which textareas or divs are used as WYSIWYG:</xar:mlstring>
                <br />
                     <ol style="list-style-type:lower-alpha; ">
                         <li style="margin-top:20px;">
                            <xar:set name="emphcode">'<strong><code>class="mceNoEditor"</code></strong>'</xar:set>
                            <xar:ml>
                                 <xar:mlstring>Choose the 'All Text Areas Mode' and every 
                                 textarea will be WYSIWYG enabled when Activation Method is set to 'Automatic'. 
                                 Not recommended as the javascript is loaded on every page even when not 
                                 required, but good for testing and easy install. With this method you can 
                                 turn off WYSIWYG in a specific textarea by adding the special reserved 
                                 class #(1)to the textarea. 
                                 This acts as a marker that tells xartinymce NOT to activate WYSIWYG 
                                 for this textarea (do this in your template or a textarea validation 
                                 in Articles or Dynamic Data).
                                 </xar:mlstring>
                             <xar:mlvar>#$emphcode#</xar:mlvar>
                             </xar:ml>
                         </li>
                         <li style="margin-top:20px;">
                            <xar:set name="flushurldesc">'<a href="'.$ddflushurl.'">'.xarML('flush the Property Cache').'</a>'</xar:set>
                            <xar:ml>
                                <xar:mlstring>Choose the Mode of <strong>Special Labelled Only</strong> in 
                                the configuration options.
                                Then add a  xarTinyMCE GUI Dynamic Data Property fieldto your Article pubtypes or xarPages Page Type, or anywhere else you need a WYSIWYG input area.
                                This DD Property automatically marks the div or textarea of the field with a special class trigger of #(1) and this acts as a marker for the WYSIWYG conversion.
                                You can also do this manually by adding the class as #(1)  to any textarea or div such as the textareas in xarbb templates, 
                                or through the textarea or xartinymce DD property validation in the GUI.
                                You can set row height and column width in the DD validation field. eg 20:80 for 20 rows high, 80 columns wide.
                                If you can't see the xarTinyMCE GUI DD property in your DD list then #(2).
                                </xar:mlstring>
                                <xar:mlvar>#$emphcode#</xar:mlvar>
                                <xar:mlvar>#$flushurldesc#</xar:mlvar>
                            </xar:ml>

                        </li>
                     </ol>
                </li>
               <li style="margin-top:20px;">
                        <xar:mlstring>Activation mode - you can activate xartinymce automatically or 
                        by using manual configuration via a xarTinymce DD property, textarea property, 
                        or in the templates.</xar:mlstring>

                     <ol style="list-style-type:lower-alpha; ">
                         <li style="margin-top:20px;">
                             <xar:mlstring>Choose <strong>Automatic</strong> to have xarTinyMce 
                             automatically activated. This is required when mode is set to "All Textareas" 
                             or you are using multiple custom configurations. 
                             </xar:mlstring>
                         </li>
                             <li style="margin-top:20px;">
                             <xar:mlstring>Choose <strong>Manual Override</strong> : 
                             In this instance either use a tinymce Dynamic Data Property 
                             to replace your textareas. If you want to use any textarea in your site, 
                             you should also add the following specific template snippet code to your 
                             page or other specific templates. When you add the template snippet, all 
                             textareas contained or included in the template where you have the XarTinymce 
                             tags are converted to WYSIWYG according to the "All Text Area" or 
                             "Special Labelled Only" setting above.
                             Alternatively, replace the variable "jstring" in an override template for 
                             the <code>tinymce_insert.xd</code> template with your own tinymce variables.
                             </xar:mlstring>
                         </li>
                    </ol>
                </li>

                </ol>
                <pre>
        &lt;xar:if condition="xarModGetVar('tinymce','activetinymce') eq 1"&gt;
            &lt;xar:template file="tinymce_insert" module="tinymce" type="module" /&gt;
        &lt;/xar:if&gt;
                </pre>
                <xar:set name="moxielinkhelp">'<a href ="http://wiki.moxiecode.com/index.php/TinyMCE:Index">'.xarML('usage instructions').'</a>'</xar:set>
                <p>
                    <xar:ml>
                        <xar:mlstring>See the detailed #(1) for more detail on options.</xar:mlstring>
                        <xar:mlvar>#$moxielinkhelp#</xar:mlvar>
                    </xar:ml>
                </p>

    <h3>
     <xar:mlstring>About the Dynamic Data Property</xar:mlstring>
    </h3>
        <p>
            <xar:mlstring>The xarTinyMCE Dynamic Data WYSIWYG property is available and automatically 
            activates a WYSIWYG with mode set to All Textareas or
            Special Labelled Textareas. If you are only using the TinyMCE wysiwyg properties then 
            set your mode to Special Labelled to ensure the javascript only loads when it is needed.
            </xar:mlstring>
        </p>
            <ol>
                <li style="margin-top:20px;">
                <xar:mlstring>Add a XarTinyMCE GUI Dynamic Data field to your publication type 
                (or other module) in the usual way. For example, choose the TinyMCE property to 
                replace your Textarea properties in your Article Publication types or xarPages page types.
                </xar:mlstring>.
                </li>
                <li style="margin-top:20px;">
                    <xar:mlstring>The prompt for the Wysiwyg editor is a popup dialog box, by default. 
                    From the configuration area you can set this to an On/Off button to activate the wysiwyg area.
                    </xar:mlstring>
                </li>

                <li style="margin-top:20px;">
                <xar:mlstring>The size of the xarTinyMCE wysiwyg field automatically takes on the 
                size of the existing textarea. However you can adjust this in a number of ways. You 
                can set row height and column width in the property validation field. eg 20:80 for 20 rows high, 80 columns wide.
                You can also allow resizing of the tinyMCE wysiwyg from the config settings of the 
                TinyMCE module, or add the <strong>FullScreen</strong> toggle plugin to your tinymce 
                plugin and button layout.
                </xar:mlstring>
                </li>
            </ol>
      <h3>
            <xar:mlstring>Plug Ins</xar:mlstring>
      </h3>
           <p><xar:mlstring>There are a number of plugins bundled with xarTinymce. Add the plugin name to the
            Plug in list in the Modify Configuration settings. Some plugins require an extra button added in your Advanced Theme configuration,
            whereas others (like advimage and advlink) do not but require allowed element string added to appropriate configuration area. These include:</xar:mlstring></p>
            <ol>
               <li><xar:mlstring>Emotions - click to add fancy emoticons</xar:mlstring></li>
               <li><xar:mlstring>IESpell - IE only spellchecker</xar:mlstring></li>               
               <li><xar:mlstring>Advanced hr - click to add a hr tag and options</xar:mlstring></li>               
                <li><xar:mlstring>Time - click to add time in configured format</xar:mlstring></li>
                <li><xar:mlstring>Date - click to add date in configured format</xar:mlstring></li>
                <li><xar:mlstring>Advanced Image - allows insert of rollover images. Add the <strong>advimg</strong> to Plugins,
                 and <strong>img[class|style|src|border=0|alt|title|hspace|vspace|width|height|align|onmouseover|onmouseout]</strong>
                 to the Additional Tags configuration</xar:mlstring></li>
                <li><xar:mlstring>Advanced Link - allows insert of extended link tags, plus popup windows. Add <strong>advlink</strong> to Plugins, and <strong>a[id|name|href|style|title|onclick]</strong> to Additional Tags configuration.</xar:mlstring></li>
                <li><xar:mlstring>Save - allows insert of a Save button. Add <strong>save</strong> to Plugins, and <strong>save</strong> to Additional Tags configuration.</xar:mlstring></li>
               <li><xar:mlstring>Print - displays a Print function button. Add <strong>print</strong> to Plugins, and <strong>print</strong> to Additional Tags configuration.</xar:mlstring></li>
               <li><xar:mlstring>Search and Replace - Search, Search Next and Replace function. Add <strong>searchreplace</strong> to Plugins, and <strong>search</strong> and/or <strong>replace</strong> to Additional Tags configuration.</xar:mlstring></li>
               <li><xar:mlstring>Table - plug in to add table controls. Add <strong>table</strong> to Plugins, and either <strong>tablecontrols</strong> for all table controls, or the specific controls such as <strong>table, rowprops</strong> and so on, as per plugin documentation, to Additional Tags configuration.</xar:mlstring></li>
               <li><xar:mlstring>Contextmenu - plug in to add context menu for tables, images and flash.</xar:mlstring></li>
               <li><xar:mlstring>Loremipsum - adds text for fill in documents (new name in version 1.5.0).</xar:mlstring></li>
               <li><xar:mlstring>Fullscreen - toggle to edit in full screen.</xar:mlstring></li>
               <li><xar:mlstring>Paste - text and MS Word paste plugin.</xar:mlstring></li>
               <li><xar:mlstring>Directionality - plug in for better support of right to left languages.</xar:mlstring></li>
               <li><xar:mlstring>Page Break - icon click to add a Xaraya new page break to any of your publication type articles. Add <strong>pagebreak</strong> to Plugins, and <strong>pagebreak</strong> to Additional Tags configuration. Make sure you also allow images and appropriate attributes to view the pagebreak icon in your articles. (new plugin name in version 1.5.0)</xar:mlstring></li>
               <li><xar:mlstring>List Styles - add list style types to your lists (updated in 1.5.0)</xar:mlstring></li>
               <li><xar:mlstring>Layer - support for create/remove and z-index block elements</xar:mlstring></li>
               <li><xar:mlstring>Style - Adds CSS style editing support to enable you to edit almost any CSS style property in a visual way</xar:mlstring></li>
               <li><xar:mlstring>Spellchecker - Spellchecking for all browsers using Google and ajax, or aspell if you have it installed in php. Defaults to Google and English.</xar:mlstring></li>
               <li><xar:mlstring>Media - Media plugin allows addition of Flash, Shockwave, Quicktime, Windows Media and Real Media.</xar:mlstring></li>
               <li><xar:mlstring>VisualChars - Toggle to show or hide special characters such as hard spaces</xar:mlstring></li>
               <li><xar:mlstring>Nonbreaking - Enter nonbreaking spaces</xar:mlstring></li>
               <li><xar:mlstring>xhtmlxtras - Abiilty to add xml extras such as cite</xar:mlstring></li>
               <li><xar:mlstring>bbcode - Ability to add punbb type bbcode in your wysiwyg</xar:mlstring></li> 
               <li><xar:mlstring>dphighlight- Ability to easily add code highlighting to you articles (must have dpHighlight module installed with dpHighlight active)</xar:mlstring></li>                               
            </ol>
            <p>
                <xar:ml>
                    <xar:mlstring>Further plugins that are customized and tested for xartinymce can be downloaded from the #(1)
                    These include the previously bundled IBrowser (image upload and browse), IManager 
                    (full featured image upload, browse and editing with all the features of phpthumbs, and Dictionary lookup plugin.
                    </xar:mlstring>
                <xar:mlvar>#$xarigamiprojectlink#</xar:mlvar>
                </xar:ml>
            </p>
        <h3>
            <xar:mlstring>Custom and Multiple Configurations</xar:mlstring>
        </h3>
            <p><xar:mlstring>The Advanced Options tab in the configuration screen allows you to adjust two features:</xar:mlstring></p>
            <ol style="list-style-type:lower-alpha; ">
                <li><xar:mlstring>Multiple Configurations can now be setup allowing you to use more than one configuration on a a page.
                Please make sure you add each new configuration with a uniquetext area trigger name, and specify the mode. Each configuration should be in the form:</xar:mlstring>
                <pre>
tinyMCE.init({
    mode : "specific_textareas",
    editor_selector : "mceEditor2",
    theme : "default"
    });
                </pre>
                <xar:ml>
                <xar:mlstring>To activate your custom configuration, add the textarea trigger class to a textarea eg #(1)
                DO NOT use 'mceEditor' as the class attribute trigger as it is reserved.
                </xar:mlstring>
               <xar:mlvar>#$emphcode#</xar:mlvar>                
                </xar:ml><br /><br /></li>

                <li><xar:mlstring><strong>Custom Configuration</strong> now allows you to add your own custom configuration values to the <strong>existing</strong> default tinymce configuration. Make sure you check your resulting tinymce code in the displayed final configuration code on this page before using.</xar:mlstring></li>
            </ol>

        <h3>
            <xar:mlstring>Included Blocks</xar:mlstring>
        </h3>
            <p><xar:mlstring>There are no included blocks</xar:mlstring></p>
        <h3>
            <xar:mlstring>Included Hooks</xar:mlstring>
        </h3>
            <p><xar:mlstring>There are no included hooks</xar:mlstring></p>
        <h3>
            <xar:mlstring>Further Information</xar:mlstring>
        </h3>
            <p><xar:mlstring>Further information on xarTinyMCE can be found at</xar:mlstring></p>
            <ul>
                 <li>
                    <xar:ml>
                        <xar:mlstring>The xarTinyMCE project page at #(1). Click on main Display tab to get the latest release information.</xar:mlstring>
                        <xar:mlvar>#$xarigamiprojectlink#</xar:mlvar>
                    </xar:ml>
                 </li>
                 <li>
                    <xar:set name="resourcelink">'<a href="http://xarigami.com/project/xartinymce?page=resources" title="'.xarML('Related resources on XarTinyMCE').'">'.xarML('Xarigami Resources for xarTinyMCE').'</a>'</xar:set>
                    <xar:ml>
                        <xar:mlstring>Related tutorials and documentation on xarTinyMCE found at #(1).</xar:mlstring>
                        <xar:mlvar>#$resourcelink#</xar:mlvar>
                    </xar:ml>
                 </li>
                 <li>
                    <xar:set name="resourcebugs">'<a href="http://xarigami.com/contrails/displayproject/xtm" title="'.xarML('XarTinyMCE issue tracker').'">'.xarML('xarTinyMCE issue tracker').'</a>'</xar:set>
                    <xar:ml>
                        <xar:mlstring>Please post any bugs and feature requests at #(1).</xar:mlstring>
                        <xar:mlvar>#$resourcebugs#</xar:mlvar>
                    </xar:ml>
                 </li>                 
             </ul>
            <p style="font-size:smaller;"><strong>&#160;<xar:mlstring>xarTinyMCE WYSIWYG Editor Overview</xar:mlstring></strong><br />&#160;<xar:mlstring>Version</xar:mlstring> 3.1.0&#160; 2008-09-06
            </p>
   </div>
