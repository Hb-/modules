/** * Compact tabbed menu * * Params: *    tabmenu - selector for the menu wrapper *    tabcontent - selector for the content wrapper *    fullwidth - stretch the menu items to fit into the full width *    flush - Flush the tabs with the edge of the menu */(function(jQuery) {jQuery.fn.minitabs = function(args) {    args = args || {};    args.tabmenu = (typeof args.tabmenu == 'undefined') ? 'div.tabmenu' : args.tabmenu;    args.tabcontent = (typeof args.tabcontent == 'undefined') ? 'div.tabcontent' : args.tabcontent;    args.fullwidth = (typeof args.fullwidth == 'undefined') ? true : args.fullwidth;    args.flush = (typeof args.flush == 'undefined') ? true : args.flush;    args.active = (typeof args.active == 'undefined') ? 'active' : args.active;    // Process each selector in turn.	// The selectors are the wrapper blocks.    return this.each(function() {                // Convenience variable.        var $this = jQuery(this);		// At least one of the top tabs must be active.		// If none are, then set the first one to be active.		$this.find(args.tabmenu + " ul:first").children('li').each(function() {			if (jQuery(this).is(':last-child')) {alert('y');}			alert('x'); 		});		// ...        $this.find(args.tabmenu + " > ul > li > a").each(function() {            // JavaScript is active so remove the page hyperlink if any are set.            jQuery(this).removeAttr("href");            // Show the content block if this tab is active.            if (jQuery(this).hasClass(args.active)) {                var tabid = jQuery(this).attr("title");                jQuery("#" + tabid).show();            }			//if (jQuery(this).is(":last-child")) alert('last');        });        // Set the width of the tabs.		// The totals add up to 100%, and we avoid any fractions, which tend to 		// result in rounding errors.        if (args.fullwidth == true) {            var numberoftabs = $this.find(args.tabmenu + " ul").children().size();            if (numberoftabs > 0) {                var csswidth = Math.floor(100 / numberoftabs);                // Flushing - make sure they add up to 100%                if (args.flush == false) {                    var pcsswidth = csswidth + "%";                    $this.find(args.tabmenu + " ul li").css("width", pcsswidth);                } else {                    var totalwidth = csswidth * numberoftabs;                    if (totalwidth != 100) {                        var premaining = 100 - totalwidth;                        $this.find(args.tabmenu + " ul li").each(function() {                            if (premaining > 0) {                                var pcsswidth = (csswidth + 1) + "%";                            } else {                                var pcsswidth = csswidth + "%";                            }                            jQuery(this).css("width", pcsswidth);                            premaining--;                        });                    }                }            }        }        // Set left and right edges flush with the wrapper div, ie. full width.        if (args.flush == true) {            $this.find(args.tabmenu + " li:first-child a").css("margin-left", 0);            $this.find(args.tabmenu + " li:last-child a").css("margin-right", 0);        }        // Add a content block for any tabs that dont have a pairing block.        $this.find(args.tabmenu + " a").each(function() {            var tabid = jQuery(this).attr("title");            var tabid_selector = "#" + tabid;                        if (jQuery(tabid_selector).length == 0) {                $this.find(args.tabcontent).append("<div id='" + tabid + "'>This is an empty tab</div>");            }        });        // Set the handler for clicking the tabs.        $this.find(args.tabmenu + " a").click(function() {			// If this tab is already active, then don't do anything.			if (jQuery(this).hasClass(args.active)) return;            // Remove the class from the current active menu tab            $this.find(args.tabmenu + " ." + args.active).removeClass(args.active);			// Hide the current active content block.			// TODO: support easing functions here.            $this.find(args.tabcontent + " ." + args.active).hide();            // Make the new selected menu tab active            jQuery(this).addClass(args.active);                        // Get the name of the related tab content block            var tabid = jQuery(this).attr("title");            jQuery("#" + tabid).show();        });    });};})(jQuery);