0.2.0
-Replaced own categories with a hook to Xaraya categories. An upgrade function is included
-Allow the admin to choose a date format
-Completely rewrite of templates to be more Xaraya compliant
0.2.1
-Replaced the alerts with variables in user space (xarModSetUserVar)
-Moved the option for amount of days in event block to the block administration
-Moved page user_addcat to admin_modifycategories
-Renamed user_view to user_viewevent
-Renamed user_delete to user_deleteevent
0.2.2 Started to clean up
-Deprecate many files
+User addcat
+Color picker (taken now from Xaraya DD property tcolorpicker)
-Started move of functions out of the class
-starting to create userapi and adminapi functions Xaraya-wise
-userapi/getcatoptions deprecated
+ Included catid as option for views.
0.2.3
Changed state size to allow for internationalisation
0.2.4
Added minute interval option
Added option for module alias
0.2.6
Bug 5115 (and 5039, 4975)
Added tooltips and removed the need for OverLib

Adding DataDict to xarinit.

Table definitions are here for the moment for reference:

0.2.7 Changed the tables. Upgrade should be ok, original description below:
/*
    xarDBLoadTableMaintenanceAPI();
    $dbconn =& xarDBGetConn();
    $xartable =& xarDBGetTables();

    // draw up the design for the events table
    // this table will hold the required event information
    // this includes the event owner, start and end datetimes
    // recurrence rules and exception dates.  Most of the data
    // will be held in the icalendar format with the exception
    // of CLASS, STATUS and TRANSP.
    //
    $event_table = $xartable['julian_events'];
    $event_fields = array(
        // UID::the event id, auto-increment
        'event_id'=>array('type'=>'integer','size'=>'medium','unsigned'=>TRUE,'null'=>FALSE,'increment'=>TRUE,'primary_key'=>TRUE),

        // the calendar this event belongs to
        'calendar_id'=>array('type'=>'integer','unsigned'=>TRUE,'size'=>'medium','null'=>FALSE,'default'=>'0'),

        // what type of calendar object is this
        // 0 = CAL_TYPE_VEVENT
        // 1 = CAL_TYPE_VTODO
        // 2 = CAL_TYPE_VJOURNAL
        // 3 = CAL_TYPE_VFREEBUSY
        'type'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // ORGANIZER::the user-id of the event's owner
        'organizer'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // CONTACT::event contact
        'contact'=>array('type'=>'text','null'=>TRUE),

        // URL::event url TO C(200)
        'url'=>array('type'=>'text','size'=>'tiny','null'=>TRUE),

        // SUMMARY::the event title / one line summary TO C(255)
        'summary'=>array('type'=>'varchar','size'=>'80','null'=>TRUE),

        // DESCRIPTION::the event description
        'description'=>array('type'=>'text','null'=>TRUE),

        // RELATED-TO::this event is related to another (event_id)
        'related_to'=>array('type'=>'integer','null'=>TRUE),

        // RELTYPE::the type of relationship
        // 0 = CAL_RELTYPE_PARENT
        // 1 = CAL_RELTYPE_CHILD
        // 2 = CAL_RELTYPE_SIBLING
        'reltype'=>array('type'=>'integer','null'=>TRUE),

        // CLASS::the event class
        // 0 = CAL_CLASS_PUBLIC
        // 1 = CAL_CLASS_PRIVATE
        // 2 = CAL_CLASS_CONFIDENTIAL
        'class'=>array('type'=>'integer','null'=>FALSE),

        // SHARE_UIDS::ids to restrict shared view of an event
        //stored as a comma delimitted string
        'share_uids'=>array('type'=>'varchar','size'=>'255'),

        // PRIORITY::the priority of this event [0-9]
        'priority'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // STATUS::the status of this event
        // 0 = CAL_STATUS_TENTATIVE
        // 1 = CAL_STATUS_CONFIRMED
        // 2 = CAL_STATUS_CANCELLED
        // 3 = CAL_STATUS_NEEDS_ACTION (default)
        // 4 = CAL_STATUS_COMPLETED
        // 5 = CAL_STATUS_IN-PROCESS
        // 6 = CAL_STATUS_DRAFT
        // 7 = CAL_STATUS_FINAL
        'status'=>array('type'=>'integer','null'=>FALSE, 'default'=>'1'),

        // LOCATION::the event location
        'location'=>array('type'=>'text','null'=>TRUE),

        // STREET1::the street of the location
        'street1'=>array('type'=>'varchar','size'=>'30','null'=>TRUE),

        // STREET2::the street of the location
        'street2'=>array('type'=>'varchar','size'=>'30','null'=>TRUE),

        // CITY::the city of the location
        'city'=>array('type'=>'varchar','size'=>'30','null'=>TRUE),

        // STATE::the state of the location
        'state'=>array('type'=>'varchar','size'=>'50','null'=>TRUE),

        // ZIP::the zipcode of the location
        'zip'=>array('type'=>'varchar','size'=>'10','null'=>TRUE),

        // PHONE::the phone number of the contact
                // Version 0.1.5 enlarged to 25, was 14
        'phone'=>array('type'=>'char','size'=>'25','null'=>TRUE),

        // EMAIL::the email address of the contact
        'email'=>array('type'=>'varchar','size'=>'70','null'=>TRUE),

        // FEE::the fee for the event
        'fee'=>array('type'=>'varchar','size'=>'10','null'=>TRUE),

        // EXDATE::event exceptions YYYYMMDDHHMMSS,YYYYMMDDHHMMSS,etc. TO NOTNULL
        'exdate'=>array('type'=>'text','null'=>TRUE),

        // CATEGORIES::event category
        'categories'=>array('type'=>'text','null'=>TRUE),

        // RRULE::event recurrence rule TO I NOTNULL DEFAULT 0
        // TODO::Break this out into its components
        // FREQ::Recurrence Frequency
        // 0 = NO REPEATING
        // 1 = CAL_RECUR_FREQ_DAILY
        // 2 = CAL_RECUR_FREQ_WEEKLY
        // 3 = CAL_RECUR_FREQ_MONTHLY
        // 4 = CAL_RECUR_FREQ_YEARLY
        'rrule'=>array('type'=>'text','null'=>TRUE),

        // RECUR_FREQ::how often to repeat rule
        'recur_freq'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // UNTIL::Recurrence End Date (YYYYMMDDHHMMSS) TO T NULL
        // This should always be stored as UTC
        // Can not exist if COUNT is not null
        // MODIFIED: Changed type from varchar(14) to datetime ~DS
        'recur_until'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''

        // COUNT::Recurrence Count
        // Can not exist if UNTIL is not null

        // ADDED ~DS
        // 0 = NO REPEATING
        // 1 = SUNDAY
        // ...
        // 7 = SATURDAY
        'recur_count'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // INTERVAL::Recurrence Interval

        // ADDED ~DS
        // 0 = NO REPEATING
        // 1 = FIRST
        // 2 = SECOND
        // 3 = THIRD
        // 4 = FOURTH
        // 5 = LAST
        'recur_interval'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // DTSTART::event start date/time TO T NULL
        // MODIFIED: Changed type from varchar(14) to datetime ~DS
        'dtstart'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''

        // DTEND::event end date/time TO T NULL
        // MODIFIED: Changed type from varchar(14) to datetime ~DS
        'dtend'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''

        // DURATION::how long the event lasts
        'duration'=>array('type'=>'varchar','size'=>'50','null'=>TRUE),

        // ISALLDAY::boolean flag indicating if event is all day
        'isallday'=>array('type'=>'integer','size'=>'tiny','default'=>'0'),

        // FREEBUSY::freebusy information
        'freebusy'=>array('type'=>'text','null'=>TRUE),

        // DUE::This property defines the date and time that a to-do is expected to be completed. TO T NULL
        // MODIFIED: Changed type from varchar(14) to datetime ~DS
        'due'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''

        // TRANSP::event transparency
        // 0 = CAL_TRANSP_OPAQUE
        // 1 = CAL_TRANSP_TRANSPARENT (DEFAULT)
        'transp'=>array('type'=>'integer','null'=>FALSE,'default'=>'1'),

        // CREATED::the date/time the event was created TODO: TO I(11) DEFAULT 0
        // MODIFIED: Changed type from varchar(20) to datetime ~DS
        'created'=>array('type'=>'varchar','size'=>'20','null'=>FALSE,'default'=>''),

        // LAST-MODIFED::the date/time the event was last modified TODO: TO I(11) DEFAULT 0
        // MODIFIED: Changed type from varchar(14) to datetime ~DS
        'last_modified'=>array('type'=>'datetime','size'=>'','null'=>FALSE)// Bug 4942 removed ,'default'=>''
    );
    $sql = xarDBCreateTable($event_table,$event_fields);
    if (empty($sql)) return; // throw back
    if (!$dbconn->Execute($sql)) return;

*/

Removed the following table, keeping here for reference:
/*
    // The ATTENDEE table
    // this table is used to link up attendees and resources to an event
    $attendee_table = $xartable['julian_attendees'];
    $attendee_fields = array(
        // The attendee id
        'attendee_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'increment'=>TRUE,'primary_key'=>TRUE),

        // The user's id on this site if available
        'user_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'default'=>'0'),

        // the event id this attendee belongs to
        'event_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'default'=>'0'),

        // CUTYPE::indicates the type of calendar user
        // 0 = CAL_CUTYPE_INDIVIDUAL
        // 1 = CAL_CUTYPE_GROUP
        // 2 = CAL_CUTYPE_RESOURCE
        // 3 = CAL_CUTYPE_ROOM
        // 4 = CAL_CUTYPE_UNKNOWN
        'cutype'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // MEMBER::indicates the groups that the attendee belongs to
        // To specify the group or list membership of the calendar user
        // specified by the property.
        'member'=>array('type'=>'text','null'=>TRUE),

        // ROLE::the intended role that the attendee will have in the calendar component
        // 0 = CAL_ROLE_CHAIR
        // 1 = CAL_ROLE_REQ_PARTICIPANT (default)
        // 2 = CAL_ROLE_OPT_PARTICIPANT
        // 3 = CAL_ROLE_NON_PARTICIPANT
        'role'=>array('type'=>'integer','null'=>FALSE,'default'=>'1'),

        // PARTSTAT::status of the attendee's participation
        // 0 = CAL_PARTSTAT_NEEDS_ACTION   [ vevent, vtodo, vjournal ] (default)
        // 1 = CAL_PARTSTAT_ACCEPTED       [ vevent, vtodo, vjournal ]
        // 2 = CAL_PARTSTAT_DECLINED       [ vevent, vtodo, vjournal ]
        // 3 = CAL_PARTSTAT_TENTATIVE      [ vevent, vtodo ]
        // 4 = CAL_PARTSTAT_DELEGATED      [ vevent, vtodo ]
        // 5 = CAL_PARTSTAT_COMPLETED      [ vtodo ]
        // 6 = CAL_PARTSTAT_IN_PROCESS     [ vtodo ]
        'partstat'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // RSVP::indicating whether the favor of a reply is requested
        'rsvp'=>array('type'=>'boolean'),

        // DELEGATED-TO::indicates the calendar users that the original request was delegated to
        'delegated_to'=>array('type'=>'text','null'=>TRUE),

        // DELEGATED-FROM::indicates whom the request was delegated from
        'delegated_from'=>array('type'=>'text','null'=>TRUE),

        // SENT-BY::indicates whom is acting on behalf of the ATTENDEE
        'sent_by'=>array('type'=>'varchar','size'=>'80','null'=>TRUE),

        // CN::the common or displayable name associated with the calendar address
        'cn'=>array('type'=>'varchar','size'=>'80','null'=>TRUE),

        // DIR::indicates the URI that points to the directory information
        // corresponding to the attendee
        'dir'=>array('type'=>'text','null'=>TRUE)
    );
    $sql = xarDBCreateTable($attendee_table,$attendee_fields);
    if (empty($sql)) return; // throw back
    if (!$dbconn->Execute($sql)) return;*/

    // VALARM table will hold data for event alarm triggers
    /*$alarms_table = $xartable['julian_alarms'];
    $alarms_fields = array(
        // The alarm id
        'alarm_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'increment'=>TRUE,'primary_key'=>TRUE),

        // The user's id on this site if available
        'user_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'default'=>'0'),

        // the event id this alarm belongs to if available
        'event_id'=>array('type'=>'integer','unsigned'=>TRUE,'null'=>FALSE,'default'=>'0'),

        // TRIGGER::This property specifies when an alarm will trigger.
        // some valid examples of a TRIGGER
        // TRIGGER:-P15M (15 minutes prior to the start of the event)
        // TRIGGER;RELATED=END:P5M (5 minutes after the end of the event)
        // TRIGGER;VALUE=DATE-TIME:19980101T050000Z (absolute time)
        'trigger'=>array('type'=>'text','null'=>TRUE),

        // ACTION::This property defines the action to be invoked when an alarm is triggered.
        // 0 = CAL_ALARM_ACTION_AUDIO
        // 1 = CAL_ALARM_ACTION_DISPLAY
        // 2 = CAL_ALARM_ACTION_EMAIL (default)
        // 3 = CAL_ALARM_ACTION_PROCEDURE
        'action'=>array('type'=>'integer','null'=>FALSE,'default'=>'2'),

        // REPEAT::This property defines the number of time the alarm should be
        // repeated, after the initial trigger.
        'repeat'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // DURATION::Corresponds to the repeat value to set the duration between repeats
        // example (repeat 4 times every 5 minutes after initial trigger)
        // REPEAT:4
        // DURATION:PT5M
        'duration'=>array('type'=>'text','null'=>TRUE)
    );
    $sql = xarDBCreateTable($alarms_table,$alarms_fields);
    if (empty($sql)) return; // throw back
    if (!$dbconn->Execute($sql)) return;

0.2.8

-Replace creation of event linkage table with DataDict

Original table:

    $event_linkage_table = $xartable['julian_events_linkage'];
    $event_linkage_fields = array(
        // UID::the linked-event id, auto-increment
        'event_id'=>array('type'=>'integer','size'=>'medium','unsigned'=>TRUE,'null'=>FALSE,'increment'=>TRUE,'primary_key'=>TRUE),

      // Hooked item details:
      // - ID of external module
      // - type of external item (one module can harbour different item types)
      // - ID of external item
      'hook_modid'   =>array('type'=>'integer','null'=>FALSE,'default'=>'0'),
      'hook_itemtype'=>array('type'=>'integer','null'=>FALSE,'default'=>'0'),
      'hook_iid'     =>array('type'=>'integer','null'=>FALSE,'default'=>'0'),

        // DTSTART::event start date/time TO T NULL
        'dtstart'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''

        // DURATION::how long the event lasts
        'duration'=>array('type'=>'varchar','size'=>'50','null'=>TRUE),

        // ISALLDAY::boolean flag indicating if event is all day
        'isallday'=>array('type'=>'integer','size'=>'tiny','default'=>'0'),

        // RRULE::event recurrence rule TO I NOTNULL DEFAULT 0
        // 0 = NO REPEATING
        // 1 = CAL_RECUR_FREQ_DAILY
        // 2 = CAL_RECUR_FREQ_WEEKLY
        // 3 = CAL_RECUR_FREQ_MONTHLY
        // 4 = CAL_RECUR_FREQ_YEARLY
        'rrule'=>array('type'=>'text','null'=>TRUE),

        // RECUR_FREQ::how often to repeat rule
        'recur_freq'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // COUNT::Recurrence Count
        // Can not exist if UNTIL is not null
        // 0 = NO REPEATING
        // 1 = SUNDAY
        // ...
        // 7 = SATURDAY
        'recur_count'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // INTERVAL::Recurrence Interval
        // 0 = NO REPEATING
        // 1 = FIRST
        // 2 = SECOND
        // 3 = THIRD
        // 4 = FOURTH
        // 5 = LAST
        'recur_interval'=>array('type'=>'integer','null'=>TRUE,'default'=>'0'),

        // UNTIL::Recurrence End Date (YYYYMMDDHHMMSS) TO T NULL
        // This should always be stored as UTC
        // Can not exist if COUNT is not null
        'recur_until'=>array('type'=>'datetime','size'=>'','null'=>FALSE),// Bug 4942 removed ,'default'=>''
    );
    $sql = xarDBCreateTable($event_linkage_table,$event_linkage_fields);
    if (empty($sql)) return; // throw back
    if (!$dbconn->Execute($sql)) return;


    -Finegrained privileges. Now possible on event_id, category, class, calendar_id and submitter
    -NOTICE: you will have to redefine your privileges for Julian. The new privileges can be upgraded by simply going to the privilege and press update.

        If you get an error like this one:
        "System Error
        Bad Parameter

        ReadJulian and ViewJulian do not have the same instances. 200,all,julian,item,all,all,all,all | 100,all,julian,item,all,all,all,all | ViewJulian-100:all:julian:item:all:all:all|ReadJulian-200:all:julian:item:all:all:all:all
        "
        ,then you will need to upgrade that privilege (ViewJulian in this error)

Bugs 5349, 5240 and others

0.2.9 Fix two bugs: forgotten authid and a typo in getall.
0.4.0 Large version upgrade to show off all the changes in the previous versions, including db changes.
Add field in linked events, to have a title set in every event
Change linking to events
Change way linked events are called
0.4.1 Add wizard for privileges
Privileges now also take myself, so you can add one like "Edit my own events"
Using the configured date/time format now in tooltip and viewevent. (related to bug 5441)
Added getitemlinks and getitemtypes for further standardization
Finalize using the dynamic userlist with correct group selection (validation)
Fix bug 5350 regarding edit template and recurring date being checked/unchecked wrongly
Fix bug 5384 regarding date formatting in calevent block
Fix bug 5361 Use more Postgres friendly queries
0.4.2
Add category selector for blocks

