This module should expose a webdav server based on content in
xaraya. The information in this file is a preparation for the webdav
RFC. Once the RFC gets started, this document should be moved over
there to prevent confusion on the contents.


The rough idea for making xaraya a webdav server is as is as follows:

Each module can expose items to the webdav server, the webdav server
translates this into a directory structure like:

/articles
  /documents
    /news
    /otherpubtype
/comments
/categories
  /firstcategory
    <list of items exposed to webdav in this category>

Or in a more generic notation:\

/modulename1
  /itemtype1
    <items of itemtype 1>
  /itemtype2
    <items of itemtype 2>
/modulename2
  /itemtype3
    <items of itemtype 3>

...
  /registered_path
    items in that path

So

/                     -> exposes modulenames as directories
/modulename/          -> exposes itemtypes as directories
/modulename/itemtype/ -> exposes items as files


The first part is a direct exposure of items to the webdav server.

The second one (through categories) is an indirect one, showing the
different items based on their categories. For this both the
categories module and the module itself need to be exposed to the
webdav server module.

A third option would be thinkable, namely registering file paths in
the webdav server module directly which should be exposed over webdav.

Each item should expose a mime/type so the webserver knows what to do
with the exposed item. To some degree, file based content doesnt have
that requirement as the webdav server has some capability to discover
the mimetype automatically (for xaraya, this should be replaced by
the mimetype module)

So, by hooking modules into the webdavserver a part of the exposed
directory tree is filled. The webdav module is responsible for
creating that part of the functionality by calling the getmodname,
getitemtypes and possibly the get functions of the hooked in module.

This creates a 'virtual filesystem' exposed over webdav. The GET part
of webdav can be rather easy, for example implementing a rather
simplistic download functionality (note: the authentication system of
xaraya acts on that virtual filesystem which is kinda cool)

The PUT part is the most challenging part of the setup. The heart of
the problem comes down to a 'translators' type of
functionality. Roughly, for each 'itemtype' one or more mimetypes
need to be chosen and a translator to and from that mimetype to the
content stored in the database must be written.

For some itemtypes, this should not be too difficult, but for others
it could be quite challenging (making an OpenOffice document back and
forth out of and article of pubtype document is not a trivial task)

The other components of the Webdav protocol (COPY, MOVE, DELETE,
PROPFIND, PROPPATCH, LOCK, UNLOCK could probably be implemented in a
generic way and be made inheritable so others can adjust the base
methods.

How to acces the webdav root?
----------------------------
If we would follow xaraya's other webservices it would be something like:

http://xaraya.site.com/ws.php?type=webdav

which is of course kinda ugly and certainly not something an end user is used to 
(for example when using the web share option in ms operating systems)

For the moment we could use this and let sensible admins use redirect option in web
server to define a more friendly location.

The construction of the first level isnt that hard, we construct directories (collections)
based on the names of the modules. The second level (itemtypes) can be constructed in a 
similar way.
At the second level we have to take into account that some (most in fact) modules
do not expose a getitemtypes like concept, so we have to cope wiht that somehow.
(either by defining a 'default' itemtype of falling back to item display.

Theoretically each module should expose a get or getall function for its items, these
functions can return exactly one item or a list of items. 

An array of items is then returned, but the problem here is that each module returns a 
different type of array. 

Windows XP and Web Folders
--------------------------

Windows has had a webdav folder driver built into it, in various forms, since Windows 98SE.
However, some changes to the XP/IE6 version has introduced a few problems: it does not
work against Apache mod_dav. This may or may not have an affect on the Windows web folder
access via the Xaraya module, but it is worth noting the workarounds nonetheless.

Basically, accessing an Apache webdav folder such http://example.com/mydav with a username
'myuser' will result in a redirect to http://example.com/myuser This is consistently fails
to log onto the dav folder (i.e. the root webdav 'collection').

The workaround for this is to append a '#' or a '.' to the URL. Which you need to use will
depend on the service pack level and any versions of MS Office you have installed, but in
most cases one or the other should work. If it does not work, then it is likely you will
need to use a third-party tool such as DAVexplorer.

It is noted that up until IE5.5, web folders worked fine. It is only from IE6 that this
problem was introduced. Strangely, it does not affect IIS webdav shares. The minimum
version of IE that can be run on XP is IE6, so the problem affects all versions of XP.


