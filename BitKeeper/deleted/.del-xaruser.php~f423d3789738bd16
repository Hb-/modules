<?php

/**
 * File: $Id$
 *
 * User GUI functions for tasks module
 *
 * @package modules
 * @copyright (C) 2003 by the Xaraya Development Team.
 * 
 * @subpackage tasks
 * @author Chad Kraeft
 * @author Marcel van der Boom <marcel@xaraya.com>
*/


/**
 * Task list view
 *
 */
function tasks_user_main()
{
	xarResponseRedirect(xarModURL('tasks','user','view'));
	return true;
}

/**
 * View a list of tasks
 *
 */
function tasks_user_view($args)
{
    $data=array();
	list($parentid,$module,$type,$func,$filter,$displaydepth) = 
        xarVarCleanFromInput('parentid','module','type',
                             'func', 'filter', 'displaydepth');
	
	extract($args);
    
// 	if($module == "tasks"
//        && ($type == "user" || $type == "")
//        && ($func == "view" || $func == "")) {
// 		$output->Text(tasks_menu());
// 	}
    
	$maxlevel = xarSessionGetVar('maxlevel');
	if(!isset($displaydepth)) {
		$displaydepth = ($maxlevel ? $maxlevel : 1);
	}
	xarSessionSetVar('maxlevel', $displaydepth);

    $tasks = xarModAPIFunc('tasks','user','getall',
                           array('parentid' => $parentid,
                                 'modname' => $module,
                                 //                                 'objectid' => $objectid,
                                 'displaydepth' => 1));
    
	if ($tasks == false) {
        xarSessionSetVar('errormsg', xarGetStatusMsg() . '<br>' . xarML("Getting tasks failed"));
    }
    
	$basetaskid = xarModAPIFunc('tasks', 'user', 'getroot', array('id' => $parentid));
  
// 	if($module == "tasks" && ($type == "user" || $type == "") && $func == "view") {
// 		$output->Text(tasks_feedback());
// 	}

    $data['filterformtarget']=xarModURL('tasks','user',
                                        ($parentid ? 'display':'view'),
                                        array('' => '#tasklist'));
    $data['parentid']= (empty($parentid)) ? 0 : $parentid;
    $data['modname'] = (empty($module)) ? '' : $module;
    $data['objectid'] =(empty($objectid)) ? 0 : $objectid;

	$filters = array(xarML("Default"),
					 xarML("My tasks"),
                     xarML("Available tasks"),
                     xarML("Priority list"),
                     xarML("Recent activity")
                     );

	// Construct the filter options
    $filteroptions = array();
	$filter = xarSessionGetVar('filter');
	foreach($filters as $filterid=>$filtername) {
		$filteroptions[] = array('id' => $filterid,
								'name' => $filtername,
								'selected' => ($filterid == $filter ? 1 : 0));
	}
    $data['filteroptions']=$filteroptions;
    $data['filter']=$filter;

    // Construct the depth dropdown
	$depthdropdown = array();
	$maxdepth = xarModGetVar('tasks', 'maxdisplaydepth');
	for($x=1; $x<=$maxdepth; $x++) {
		$depthdropdown[] = array('id'=>$x, 'name'=>$x);
	}
    $data['depthdropdown']=$depthdropdown;
    $data['maxdepth']= xarSessionGetVar('maxlevel');
    $data['filtersubmit']=xarML("Filter");

	if($filter == 1 || $filter == 2 || $filter == 3) {
		//$output->Text(_TASKS_OPENTASKSONLY);
	}
							
	if(is_array($tasks) && count($tasks) > 0) {
		foreach($tasks as $key => $task) {
			$dateformat = xarModGetVar('tasks', 'dateformat');
			$dateformatlist = xarModAPIFunc('tasks','user','dateformatlist',array());
			if(empty($dateformat)) $dateformat = 1;
			$tasks[$key]['date_created'] = strftime($dateformatlist[$dateformat],$task['date_created']);
			$tasks[$key]['date_changed'] = strftime($dateformatlist[$dateformat],$task['date_changed']);
			$tasks[$key]['private'] = ($task['private'] == 1) ? "?" : "";
			$tasks[$key]['closed'] = ($task['status'] == 1) ? "x" : "";
			$tasks[$key]['creator'] = xarUserGetVar('uname',$task['creator']);
			$tasks[$key]['owner'] = xarUserGetVar('uname',$task['owner']);
			
            // TODO: Do this in the template
			$indent = "";
			for($x=2;$x<=$tasks[$key]['depth'];$x++) {
				$indent .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
			}
            $tasks[$key]['indent']=$indent;
			$tasks[$key]['url']=xarModUrl('tasks', 'user', 'display',  array('id' => $task['id']));
            $userID = xarUserGetVar('uid');
			if (/*xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_ADMIN) ||*/
                /* (xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid:$task[basetaskid]', ACCESS_MODERATE) && */
                   ($task['creator'] == $userID || $task['owner'] == $userID 	|| $task['assigner'] == $userID)
                  )
                {
                    // Checkbox insertion (see template)
			}
			
			if (/* xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_MODERATE) || */
                /* (xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_MODERATE) && */
                     ($task['creator'] == $userID || $task['owner'] == $userID   || $task['assigner'] == $userID)
                   ) {
				if(xarModGetVar('tasks', 'showoptions')) {
					$options = array();
					
					$options[] = xarModURL('tasks','admin','modify', array('id' => $task['id'])); // Edit
                    // Only allow accept if currently unassigned
                    // If assigned to current user, or after accepted, must be approved before re-assignment (see below)
					$options[] = xarModURL('tasks', 'admin', 'accept', array('id' => $task['id'])); // Accept
											
                    // This forces approval before re-assignment
                    // TODO: Implement user list for re-assignment
                    // Pull all member of groups *other* than primary user group *unless*:
                    // - current user is not a member of any other group
                    // TODO: Create new api function to hanle this: tasks_userapi_getpeers($args('uid' = xarSessionGetVar('uid')))
                    
                    $options[] = ($task['date_approved'] > 0) ? 
                        xarmodurl('tasks', 'admin', 'assign', array('id' => $task['id'])): // Assign
                        xarmodurl('tasks', 'admin','approve', array('id' => $task['id'])); // Approve
				   
					$options[] = ($task['status'] == 1) ?
                        xarmodurl('tasks', 'admin', 'open', array('id' => $task['id'])): // Open
                        xarmodurl('tasks', 'admin','close', array('id' => $task['id'])); //Close
				   
					$options[] = (empty($task['private'])) ?
                        xarmodurl('tasks', 'admin', 'unpublish',array('id' => $task['id'])): // Unpublish
                        xarmodurl('tasks', 'admin', 'publish',array('id' => $task['id'])); // Publish
                    $tasks[$key]['options']=$options;
				}
			}
		}
	}
    $data['tasks']=$tasks;

    // Construct the task options
	$taskoptionslist = array(1 => xarML("Surface tasks"),
							2 => xarML("Delete") . ' (' . xarML("delete subtasks") . ')',
							3 => xarML("Delete") . ' (' . xarML("surface subtasks"). ')');
	$taskoptions = array();
	foreach($taskoptionslist as $optionid=>$option) {
		$taskoptions[] = array('id' => $optionid,
								'name' => $option);
	}
    $data['taskoptions']=$taskoptions;
    $data['tasksubmitbutton']=xarML("X");
	return $data;
}

/**
 * Display one task
 *
 */
function tasks_user_display($args)
{
    $data=array();
    list($modname, $mainid, $filter,$objectid,$module,$type,$func) = 
        xarVarCleanFromInput('modname',
                             'id',
                             'filter',
                             'objectid',
                             'module',
                             'type',
                             'func');
    
    // how to get module id of calling module?
    // check if output has already been displayed
    // if not, use xarvarcleanfrominput('module') to get mod id
    // then set output as displayed
    // where to unset?
    // set session var for displayed and for module name
    // if module name is different, unset displayed
    
    extract($args);
    
	if(empty($mainid) || !is_numeric($mainid)) {
		xarSessionSetVar('errormgs', xarGetStatusMsg() . '<br>' . xarML("Module argument error") . ': tasks_user_display');
		xarResponseRedirect(xarmodurl('tasks', 'user', 'view'));
		return;
	} elseif(empty($id)) {
		$id = $mainid;
	}

	if(!isset($id)) {
		xarSessionSetVar('errormgs', xarGetStatusMsg() . '<br>' . xarML("Module argument error") . ': tasks_user_display');
		xarResponseRedirect(xarmodurl('tasks', 'user', 'view'));
		return;
	}

	if($module == "tasks" && ($type == "user" || $type == "") && $func == "display" && $id == $mainid) {
	    //$output->Text(tasks_menu());
	}

    // Get the task information from the database
    $task = xarModAPIFunc('tasks', 'user', 'get', array('id' => $id));

    if ($task == false) {
        xarSessionSetVar('errormsg', xarGetStatusMsg() . '<br>' . xarML("Getting task failed"));
		// WHAT DOES THIS DO?
		if($id == $mainid) {
			//$output->Text(tasks_feedback());
			//return $output->GetOutput();
		}
    }

	$userID = xarSessionGetVar('uid');
	// IS CLIENT OR MEMBER AND TASK IS PUBLIC
	// IS CREATOR/OWNER/ASSIGNER OF PRIVATE TASK?
	// IS MODERATOR / PM
    // 	if ((/*!xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_READ) && */ $task['private'] == 0) && 
    //         /*(!xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_COMMENT) && */ 
    //          ($task['creator'] == $userID || $task['owner'] == $userID || $task['assigner'] == $userID) /* && */
    //         /*(!xarSecAuthAction(0, 'tasks::task', '$task[modname]:$task[objectid]:$task[basetaskid]', ACCESS_MODERATE))*/ ) {
    //         xarSessionSetVar('errormsg', xarGetStatusMsg() . '<br>' . _TASKS_NOAUTH);
    // 		$output->Text(tasks_feedback());
    //         return $output->GetOutput();
    //     }

	if($id == $mainid) {
		if($task['parentid'] > 0) { // IF NOT ROOT
            // Get the parent task
			$data['parent'] = xarModAPIFunc('tasks', 'user', 'get', array('id' => $task['parentid']));
            $data['parentlink']=xarModUrl('tasks','user','display',array('id' => $task['parentid']));
			if($task['basetaskid'] == false) {
				xarSessionSetVar('errormsg', xarGetStatusMsg() . '<br>' . xarML("Invalid base task"));
			} else {
                // Recursion!!!
				$data['displaybase'] = xarModFunc('tasks', 'user', 'display', array('id' => $task['basetaskid']));
			}
		}
	
		if($task['ttlsubtasks'] > 0) {
			$data['subtaskview'] = xarModFunc('tasks','user','view',array('parentid' => $id,'filter' => $filter));
		} else {
            $data['subtaskview'] = '';
        }
	
        // Add form for adding a new task
        xarModLoad('tasks','admin');
		$data['addtaskform'] = xarModFunc('tasks', 'admin', 'new', array('parentid' => $id));           

        // TODO: investigate this
		//$output->Text(tasks_feedback());

	}

	$options = array();
	$options['edit']['link'] = xarmodurl('tasks','admin','modify', array('id' => $task['id'])); // Edit
    $options['edit']['label']= xarML('Edit task');
    // only allow accept if currently unassigned
    // if assigned to current user, or after accepted, must be approved before re-assignment (see below)
	$options['accept']['link'] = xarmodurl('tasks','admin','accept', array('id' => $task['id']));
    $options['accept']['label'] = xarML('Accept task');
   
    // this forces approval before re-assignment
    // need to implement user list for re-assignment
    // pull all members of groups *other* than primary user group *unless* current
    //   user is not a member of any other group
    //   create new function to handle this: tasks_userapi_getpeers($args('uid' = xarsessiongetvar('uid')))
	if ($task['date_approved'] > 0) {
        $options['assign']['link'] = xarmodurl('tasks','admin','assign', array('id' => $task['id']));
        $options['assign']['label'] = xarML('Assign task');
    } else {
        $options['approve']['link']= xarmodurl('tasks','admin','approve',array('id' => $task['id']));
        $options['approve']['label']= xarML('Approve Task');
    }
	if ($task['status'] == 1) {
        $options['open']['link']= xarmodurl('tasks','admin','open', array('id' => $task['id']));
        $options['open']['label'] = xarML('Open tasks');
    } else {
        $options['close']['link'] =xarmodurl('tasks','admin','close',array('id' => $task['id']));
        $options['close']['label'] = xarML('Close task');
    }
    if (empty($task['private'])) {
        $options['unpublish']['link'] = xarmodurl('tasks','admin','publish', array('id' => $task['id']));
        $options['unpublish']['label']= xarML('Unpublish task');
    } else {
        $options['publish']['link'] = xarmodurl('tasks','admin','publish', array('id' => $task['id']));
        $options['publish']['label'] = xarML('Publish task');
    }
	
	$data['options'] = $options;
    $data['task']=$task;
    $data['id']=$id;
    $data['mainid']=$mainid;
    return $data;
}

/**
 * Construct the menu
 *
 */
function tasks_menu()
{
// 	$output = new pnHTML();

// 	list($filter,$id,$module,$type,	$func) = xarVarCleanFromInput('filter',
// 									'id',
// 									'module',
// 									'type',
// 									'func');
									
// 	if(isset($filter)) xarSessionSetVar('filter', $filter);

//     $output->SetInputMode(_PNH_VERBATIMINPUT);
//     $output->TableStart(_TASKS);
//     $output->SetOutputMode(_PNH_RETURNOUTPUT);
//     $columns = array();
// 	if(isset($id) && $module == "tasks" && $func == "display") {
// 		$columns[] = $output->Text('<a href="#task">Task</a>');	
// 		$columns[] = $output->Text('<a href="#addtask">New Subtask</a>');	
// 		$columns[] = $output->Text('<a href="#tasklist">Subtask List</a>');	
// 	}
//     $columns[] = $output->URL(xarmodurl('tasks',
//                                        'user',
//                                        'view'),
//                               _TASKS_VIEW);
// 	if (xarSecAuthAction(0, 'tasks::task', '::', ACCESS_ADD)) {
// 		$columns[] = $output->URL(xarmodurl('tasks',
// 										   'admin',
// 										   'new'),
// 								  _TASKS_ADD);
// 	}
//     $output->SetOutputMode(_PNH_KEEPOUTPUT);
//     $output->Text('<tr><td align=center>' . implode(" | ",$columns) . '</td></tr>');
//     $output->TableEnd();

    return '';

}

/**
 * Give feedback
 *
 */
function tasks_feedback()
{
	$feedback = xarGetStatusMsg();
    if(empty($feedback)) $feedback="";
	return $feedback;
}

?>