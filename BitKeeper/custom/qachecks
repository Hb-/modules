#!/bin/sh

#
# This script is for running some of the code review tests for Xaraya. It is
# based on the Xaraya QA Code Review Checklist v0.1
# (http://www.ninthave.net/docs/81)
#
# Roger Keays <r.keays@ninthave.net>
# 05 Jan 2004
# 
# TODO: filter to only run template tests on .xd and .xt files
#


export BK_SIDE=server
export BK_RUNQA=yes

# Just run the trigger
`bk root`/BitKeeper/triggers/pre-apply.qa

# Use exit code of the trigger
exit $?




# What is below is the original qachecks script from Roger,
# because i would like to manage it in one place, i'm adding stuff 
# to the trigger and make sure we can run the trigger as custom
# command too.

# usage
if [ ! $1 ]; then 
    echo "Usage: bk $(basename $0) <filename>" 
    exit 1
fi

# variable alias
FILE=$1
FILE_NO_COMMENTS=/tmp/xarlint-$$

# is this a template file?
if [[ ${FILE:0-2} = "xd" || ${FILE:0-2} = "xt" ]]; then
    FILETYPE=template
elif [[ ${FILE:0-3} = "php" ]]; then
    FILETYPE=php
else
    FILETYPE=unknown
    echo "Warning: Unkown file type"
fi

# trap to remove temporary files when we quit
trap "rm /tmp/xarlint*$$* 2> /dev/null" 0

# find location of php
if [ `which php` ]; then
    PHP=`which php`
elif [ `which php4` ]; then
    PHP=`which php4`
else
    echo "Warning: Couldn't find php or php4 executable"
fi

# grep flags (-n is for line numbers)
GREP="grep -n "

# use the c pre-processor to remove comments
if [[ `which cpp` && $FILETYPE = "php" ]]; then
    cpp $FILE > $FILE_NO_COMMENTS 2> /dev/null
else
    echo "Warning: Couldn't find cpp"
    cp $FILE $FILE_NO_COMMENTS
fi

# file metrics
TOTAL=`cat $FILE | wc -l`
REALCODE=`grep '[^[:space:]]' $FILE_NO_COMMENTS | wc -l`
BLANK=`grep -x '[[:space:]]+\|' $FILE | wc -l`
COMMENTS=`expr $TOTAL - $BLANK - $REALCODE`

echo "
           File: $FILE
    LOC (total): $TOTAL
    LOC (blank): $BLANK
 LOC (comments):      $COMMENTS
LOC (code only): $REALCODE
"

# test 1.1: basic parse tests using php lint
if [ $FILETYPE = "php" ]; then
 echo
 echo "1.1, 1.7: basic parse tests using php lint"
 [ $PHP ] && $PHP -l $FILE
 [ ! $PHP ] && echo "Skipped: can't find php"
fi

# test 1.3: Use of = instead of ==
if [ $FILETYPE = "php" ]; then
 echo
 echo "1.3: Use of = instead of =="

 # sometimes functions have defaults and will match the first regexp, so we
 # add a second. TODO: Better support for for loops.
 ( $GREP '([^)]*[^=!>]=[^=><][^)]*)' $FILE_NO_COMMENTS | \
   grep -v '^\([[:digit:]]\)\+:[[:space:]]*\(function\|for\)' ) || \
     echo "PASSED"
fi

# test 1.4: Use of $ for template variables
if [ $FILETYPE = "template" ]; then
 echo
 echo "1.4: Use of $ for template variables"
 $GREP '#[^\$\(#]*#' $FILE || echo "PASSED"
fi

# test 1.8: No use of die() or exit()
if [ $FILETYPE = "php" ]; then
 echo
 echo "1.8: No use of die() or exit()"
 $GREP '\(die\)\|\(exit\)' $FILE_NO_COMMENTS || echo "PASSED"
fi

# test 1.13: Use of TODO / FIXME / CHECKME
echo
echo "1.13: Use of TODO / FIXME / CHECKME"
$GREP -I '\(fixme\)\|\(todo\)\|\(checkme\)' $FILE || \
    echo "PASSED (none found)"

# test 2.1: No output generation (echo/print)
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.1: No output generation (echo/print)"
 $GREP '\(echo\)\|\(print\)' $FILE_NO_COMMENTS || echo "PASSED"
fi

# test 2.3: Common code in templates (maybe for php too?)
if [ $FILETYPE = "template" ]; then
 echo
 echo "2.3: Common code in templates (maybe for php too?)"
 for i in *; do 
  [ "$i" != "$FILE" ] && echo "$i vs $FILE" && comm -12 $i $FILE
 done
fi

# test 2.4: Minimize php usage in templates
if [ $FILETYPE = "template" ]; then
 echo
 echo "2.4: Minimize php usage in templates"
 $GREP '<?php' $FILE || echo "PASSED"
fi

# test 2.6: license information included
if [ $FILETYPE = "template" ]; then
 echo
 echo "2.6: license information included"
 $GREP '<!-- License' $FILE_NO_COMMENTS && echo "PASSED" || echo "FAILED"
fi

# test 2.10: Use <?php
echo
echo "2.10: Use <?php"
$GREP '<?=\?[^xp][^mh][^lp]' $FILE_NO_COMMENTS || echo "PASSED"

# test 2.11: Indentation is 4 spaces, no tabs
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.11: Indentation is 4 spaces, no tabs"
 $GREP '	' $FILE_NO_COMMENTS || echo "PASSED (no tabs)"

 # this regexp says "not (empty lines or (lines starting with
 # spaces in multiples of four and followed by a non-space or ' *', which is
 # the middle of a multiline comment))"
 if $GREP -v '\(^[[:space:]]*$\)\|\(^\(    \)*\([^[:space:]]\| \*\)\)' \
          $FILE_NO_COMMENTS > /tmp/xarlint-2.11.$$; then

      # do a line count
      echo "(`cat /tmp/xarlint-2.11.$$ | wc -l` suspect lines)"
      cat /tmp/xarlint-2.11.$$
 else
      echo "PASSED (good indenting)"
 fi
fi

# test 2.13 Use unix file and line endings.
echo
echo "2.13 Use unix file and line endings."
$GREP '' $FILE_NO_COMMENTS || echo "PASSED"

# test 2.14 Avoid use of Perl/shell comments.
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.14 Avoid use of Perl/shell comments."
 $GREP '^[[:space:]]*#' $FILE || echo "PASSED"
fi

# test 2.15: Use xarInclude in preference of the php equivalent. 
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.15: Use xarInclude in preference of the php equivalent."
 $GREP '^\(.*;\)\?[[:space:]]*include' $FILE_NO_COMMENTS || echo "PASSED"
fi

# test 2.16: Use include_once and require_once in preference to include and
# require
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.16: Use include_once and require_once in preference to include and
        require"
 $GREP '^\(.*;\)\?[[:space:]]*include[^_][^o][^n][^c][^e]' $FILE_NO_COMMENTS \
        || echo "PASSED (includes)"
 $GREP '^\(.*;\)\?[[:space:]]*require[^_][^o][^n][^c][^e]' $FILE_NO_COMMENTS \
        || echo "PASSED (requires)"
fi

# test 2.17: Function calls have correct spacing

# test 2.18: Function declaration use the 'one true brace' convention.
if [ $FILETYPE = "php" ]; then
 echo
 echo "2.18: Function declaration use the 'one true brace' convention."
 $GREP '^[[:space:]]*function.*{.*' $FILE_NO_COMMENTS || echo "PASSED"
fi
