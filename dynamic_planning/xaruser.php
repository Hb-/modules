<?php
// $Id: s.xaruser.php 1.3 02/12/01 14:26:19+01:00 marcel@hsdev.com $
// ----------------------------------------------------------------------
// Dynamic Planning Module
// Copyright (C) 2002 by Curtis Nelson.
// http://www.liminis.com/~curtis/
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WIthOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
// Original Author of file: Jim McDonald
// Current  Author of file: Curtis Nelson
// Purpose of file:  Dynamic Planning user display functions
// ----------------------------------------------------------------------

/**
 * the main user function
 */
function dynamic_planning_user_main()
{
    // Create output object 
    $output = new pnHTML();

    // Security check
    if (!pnSecAuthAction(0, 'dynamic_planning::', '::', ACCESS_READ)) {
        $output->Text(xarML('Not authorised to access  module'));
        return $output->GetOutput();
    }

    // Add menu to output 
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(dynamic_planning_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Return the output 
    return $output->GetOutput();
}

/**
 * view tracks
 * This is a standard function to provide an overview of all of tracks
 */
function dynamic_planning_user_view()
{
    // Create output object
    $output = new pnHTML();

    // Add menu to output 
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(dynamic_planning_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Security check
    if (!pnSecAuthAction(0, 'dynamic_planning::', '::', ACCESS_OVERVIEW)) {
        $output->Text(_TEMPLATENOAUTH);
        return $output->GetOutput();
    }

    // Load API. 
    if (!pnModAPILoad('dynamic_planning', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $tracks = pnModAPIFunc('dynamic_planning',
                          'user',
                          'getall');

    if ($tracks == false) {
        $output->Text(xarML('Failed to get any items'));
    return $output->GetOutput();
    }

    // Loop through each track
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    foreach ($tracks as $track) {
            $output->Text('<div>');
        $output->Text('<p>');
            $output->URL(pnModURL('dynamic_planning',
                                  'user',
                                  'display',
                                  array('trackid' => $track['trackid'])),
                         pnVarPrepForDisplay($track['trackname']));
        $output->Text('<div><p>Track Leader: '.pnVarPrepForDisplay($track['tracklead']).'</p><p>Read News | View Tasks | View Planning Sheets | Post News | Edit Tasks | Edit Sheets</p>');
        $output->Text('<p>'.pnVarPrepForDisplay($track['tracktext']).'</p>');
        $output->Text('<p>Track Status: '.pnVarPrepForDisplay($track['trackstatus']).'</p>');
        $output->Text('<p>Most Recent News:</p>');
        $output->Text('<p>Print View: Summary | Planning Sheets</p>');
        $output->Text('</div></div>');
            $output->Linebreak();
       
    }
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

/***************
 * display track
 * This is a standard function to provide detailed informtion on a single track
 */
function dynamic_planning_user_display($args)
{
    // Get parameters from whatever input we need.
    list($trackid) = pnVarCleanFromInput('trackid');

    // User functions of this type can be called by other modules. 
    extract($args);

    // check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $trackid = $objectid;
    }

    // Create output object 
    $output = new pnHTML();

    // Add menu to output 
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(dynamic_planning_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Load API.  
    if (!pnModAPILoad('dynamic_planning', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    // The API function is called
    $track = pnModAPIFunc('dynamic_planning',
                          'user',
                          'gettrack',
              array('trackid' => $trackid));

    if ($track == false) {
        $output->Text(xarML('Failed to get any items'));
    return $output->GetOutPut();
    }
    
    // Get task info for the track
    $tasks = pnModAPIFunc('dynamic_planning',
                          'user',
                          'get',
                          array('trackid' => $trackid));

    if ($tasks == false) {
        $output->Text(xarML('Failed to get any items'));
        return $output->GetOutput();
    }

    // Display it
    
    $output->Text(xarML('Track Name') . ': ');
    $output->Text($track['trackname']);
    $output->Linebreak(2);
    
    $output->Text(xarML('Track Leader') . ': ');
    $output->Text($track['tracklead']);
    $output->Linebreak(2);
  
    $output->Text(xarML('Track Description') . ': ');
    $output->Text($track['tracktext']);
    $output->Linebreak(2);

    $output->Text(xarML('Track Status') . ': ');
    $output->Text($track['trackstatus']);
    $output->Linebreak(2);

    $output->Text(xarML('Most Recent News') . ': ');
    $output->Linebreak(2);


    if (pnSecAuthAction(0, 'dynamic_planning::', '$track[trackname]::', ACCESS_ADMIN)) {
        $output->TableStart('Track Tasks', array('Task','Description','Start','End','Last','Percent','Options'));
        foreach($tasks as $task) {
            $options = array();
                $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $tasklink = $output->URL(pnModURL('dynamic_planning',
                           'user',
                           'displaytask',
                           array('taskid' => $task['taskid'])), $task['tasktitle']);
                $options[] = $output->URL(pnModURL('dynamic_planning',
                                                   'admin',
                                                   'modifytask',
                                                   array('taskid' => $task['taskid'])),
                                          _EDIT);
                $options[] = $output->URL(pnModURL('dynamic_planning',
                                                       'admin',
                                                       'deletetask',
                                                       array('taskid' => $task['taskid'])),
                                              _DELETE);
                
            

            $options = join(' | ', $options);
            $output->SetInputMode(_PNH_VERBATIMINPUT);

            $info = array($tasklink,$task['tasktext'],$task['taskstart'],$task['taskend'],$task['tasklast'],$task['taskpercent'],$options);
            $output->SetOutputMode(_PNH_KEEPOUTPUT);
            $output->TableAddRow($info);
            $output->SetInputMode(_PNH_PARSEINPUT);
         }
         $output->TableEnd();
    } else {
        $output->TableStart('Track Tasks', array('Task','Description','Start','End','Last','Percent'));
        foreach($tasks as $task) {
            $info = array($task['tasktitle'],$task['tasktext'],$task['taskstart'],$task['taskend'],$task['tasklast'],$task['taskpercent']);
            $output->TableAddRow($info);
        }
        $output->TableEnd();
    }
    // Return the output that has been generated by this function
    return $output->GetOutput();
}

/**
 * display task
 * This is a standard function to provide detailed informtion on a single task
 */
function dynamic_planning_user_displaytask($args)
{
    // Get parameters from whatever input we need.
    list($taskid) = pnVarCleanFromInput('taskid');

    // User functions of this type can be called by other modules.
    extract($args);

    // check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $taskid = $objectid;
    }

    // Create output object
    $output = new pnHTML();

    // Add menu to output
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(dynamic_planning_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Load API.
    if (!pnModAPILoad('dynamic_planning', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    // The API function is called
    $task = pnModAPIFunc('dynamic_planning',
                          'user',
                          'gettask',
                          array('taskid' => $taskid));

    if ($task == false) {
        $output->Text(xarML('Failed to get any items'));
        return $output->GetOutPut();
    }

    // Display Track

    $output->Text(xarML('Track Name') . ': ');
    $output->Text($task['tasktitle']);
    $output->Linebreak(2);
    
    $output->Text(xarML('Task Description') . ': ');
    $output->Text($task['tasktext']);
    $output->Linebreak(2);

    $output->Text(xarML('Start Date') . ': ');
    $output->Text($task['taskstart']);
    $output->Linebreak(2);

    $output->Text(xarML('End Date') . ': ');
    $output->Text($task['taskend']);
    $output->Linebreak(2);

    $output->Text(xarML('Percent Complete') . ': ');
    $output->Text($task['taskpercent']);
    $output->Linebreak(2);

    $output->Text(xarML('Task Steps') . ': ');
    $output->Text($task['tasksteps']);
    $output->Linebreak(2);

    $output->Text(xarML('Task Team') . ': ');
    $output->Text($task['taskteam']);
    $output->Linebreak(2);


    // Return the output that has been generated by this function
    return $output->GetOutput();
}


/**
 * generate menu fragment
 */
function dynamic_planning_usermenu()
{
    // Create output object 
    $output = new pnHTML();

    // Display status message if any.  

    // Start options menu
    $output->Text(pnGetStatusMsg());
    $output->Linebreak(2);

    // Menu options.  These options are all added in a single row, to add
    // multiple rows of options the code below would just be repeated
    $output->TableStart(xarML('Dynamic Planning Module'));
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $columns = array();
    $columns[] = $output->URL(pnModURL('dynamic_planning',
                                       'user',
                                       'view'),
                              xarML('View Tracks'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddRow($columns);
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->TableEnd();

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

?>